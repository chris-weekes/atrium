using System;
using System.Data;
using System.Data.SqlClient;
using lmDatasets;


namespace atriumDAL
{
	/// <summary>
	/// Class generated by sgen 
	/// based on ActivityCode table 
	/// in lawmate database
	/// on 2/6/2007
	/// </summary>
	public partial class ActivityCodeDAL:atDAL.ObjectDAL
	{

    	internal ActivityCodeDAL(atriumDALManager pDALManager) :base(pDALManager)
		  {
			  Init();
		  }

        private void Init()
        {


            this.sqlDa.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
		  new System.Data.Common.DataTableMapping("Table", "ActivityCode", new System.Data.Common.DataColumnMapping[] {
		  
		  new System.Data.Common.DataColumnMapping("ActivityCodeID", "ActivityCodeID"),
		  new System.Data.Common.DataColumnMapping("ActivityCode", "ActivityCode"),
		  new System.Data.Common.DataColumnMapping("ActivityNameEng", "ActivityNameEng"),
		  new System.Data.Common.DataColumnMapping("ActivityNameFre", "ActivityNameFre"),
		  new System.Data.Common.DataColumnMapping("ACMajorCode", "ACMajorCode"),
		  new System.Data.Common.DataColumnMapping("AssociatedObject", "AssociatedObject"),
		  new System.Data.Common.DataColumnMapping("AssociatedField", "AssociatedField"),
		  new System.Data.Common.DataColumnMapping("DefaultHours", "DefaultHours"),
		  new System.Data.Common.DataColumnMapping("ReadOnly", "ReadOnly"),
		  new System.Data.Common.DataColumnMapping("Obsolete", "Obsolete"),
		  new System.Data.Common.DataColumnMapping("Milestone", "Milestone"),
		  new System.Data.Common.DataColumnMapping("Communication", "Communication"),
		  new System.Data.Common.DataColumnMapping("SkipRelatedFields", "SkipRelatedFields"),
		  new System.Data.Common.DataColumnMapping("GoToDisbursements", "GoToDisbursements"),
		  new System.Data.Common.DataColumnMapping("entryUser", "entryUser"),
		  new System.Data.Common.DataColumnMapping("entryDate", "entryDate"),
		  new System.Data.Common.DataColumnMapping("updateUser", "updateUser"),
		  new System.Data.Common.DataColumnMapping("updateDate", "updateDate"),
		  new System.Data.Common.DataColumnMapping("ts", "ts"),
          new System.Data.Common.DataColumnMapping("ActivityNamePastTenseEng", "ActivityNamePastTenseEng"),
          new System.Data.Common.DataColumnMapping("ActivityNamePastTenseFre", "ActivityNamePastTenseFre"),
			})});

            // 
            // sqlSelect
            // 
            this.sqlSelect.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelect.Connection = myDALManager.SqlCon;

            this.sqlSelectAll.CommandText = "[ActivityCodeSelect]";
            this.sqlSelectAll.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelectAll.Connection = myDALManager.SqlCon;
            this.sqlSelectAll.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            // 
            // sqlInsert
            // 
            this.sqlInsert.CommandText = "[ActivityCodeInsert]";
            this.sqlInsert.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlInsert.Connection = myDALManager.SqlCon;
            this.sqlInsert.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlInsert.Parameters.Add(new SqlParameter("@ActivityCodeID", SqlDbType.Int, 10, "ActivityCodeID"));
            this.sqlInsert.Parameters["@ActivityCodeID"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ActivityCode", SqlDbType.NVarChar, 4, "ActivityCode"));
            this.sqlInsert.Parameters["@ActivityCode"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ActivityNameEng", SqlDbType.NVarChar, 200, "ActivityNameEng"));
            this.sqlInsert.Parameters["@ActivityNameEng"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ActivityNameFre", SqlDbType.NVarChar, 200, "ActivityNameFre"));
            this.sqlInsert.Parameters["@ActivityNameFre"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ACMajorCode", SqlDbType.NVarChar, 4, "ACMajorCode"));
            this.sqlInsert.Parameters["@ACMajorCode"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AssociatedObject", SqlDbType.NVarChar, 50, "AssociatedObject"));
            this.sqlInsert.Parameters["@AssociatedObject"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AssociatedField", SqlDbType.NVarChar, 50, "AssociatedField"));
            this.sqlInsert.Parameters["@AssociatedField"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@DefaultHours", SqlDbType.Decimal, 50, "DefaultHours"));
            this.sqlInsert.Parameters["@DefaultHours"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ReadOnly", SqlDbType.Bit, 1, "ReadOnly"));
            this.sqlInsert.Parameters["@ReadOnly"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Obsolete", SqlDbType.Bit, 1, "Obsolete"));
            this.sqlInsert.Parameters["@Obsolete"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Milestone", SqlDbType.Bit, 1, "Milestone"));
            this.sqlInsert.Parameters["@Milestone"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Communication", SqlDbType.Bit, 1, "Communication"));
            this.sqlInsert.Parameters["@Communication"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@SkipRelatedFields", SqlDbType.Bit, 1, "SkipRelatedFields"));
            this.sqlInsert.Parameters["@SkipRelatedFields"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@GoToDisbursements", SqlDbType.Bit, 1, "GoToDisbursements"));
            this.sqlInsert.Parameters["@GoToDisbursements"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
            this.sqlInsert.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
            this.sqlInsert.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
            this.sqlInsert.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
            this.sqlInsert.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlInsert.Parameters["@ts"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ActivityNamePastTenseEng", SqlDbType.NVarChar, 200, "ActivityNamePastTenseEng"));
            this.sqlInsert.Parameters["@ActivityNamePastTenseEng"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ActivityNamePastTenseFre", SqlDbType.NVarChar, 200, "ActivityNamePastTenseFre"));
            this.sqlInsert.Parameters["@ActivityNamePastTenseFre"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlUpdate
            // 
            this.sqlUpdate.CommandText = "[ActivityCodeUpdate]";
            this.sqlUpdate.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlUpdate.Connection = myDALManager.SqlCon;
            this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlUpdate.Parameters.Add(new SqlParameter("@ActivityCodeID", SqlDbType.Int, 10, "ActivityCodeID"));
            this.sqlUpdate.Parameters["@ActivityCodeID"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ActivityCode", SqlDbType.NVarChar, 4, "ActivityCode"));
            this.sqlUpdate.Parameters["@ActivityCode"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ActivityNameEng", SqlDbType.NVarChar, 200, "ActivityNameEng"));
            this.sqlUpdate.Parameters["@ActivityNameEng"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ActivityNameFre", SqlDbType.NVarChar, 200, "ActivityNameFre"));
            this.sqlUpdate.Parameters["@ActivityNameFre"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ACMajorCode", SqlDbType.NVarChar, 4, "ACMajorCode"));
            this.sqlUpdate.Parameters["@ACMajorCode"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AssociatedObject", SqlDbType.NVarChar, 50, "AssociatedObject"));
            this.sqlUpdate.Parameters["@AssociatedObject"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AssociatedField", SqlDbType.NVarChar, 50, "AssociatedField"));
            this.sqlUpdate.Parameters["@AssociatedField"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@DefaultHours", SqlDbType.Decimal, 50, "DefaultHours"));
            this.sqlUpdate.Parameters["@DefaultHours"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ReadOnly", SqlDbType.Bit, 1, "ReadOnly"));
            this.sqlUpdate.Parameters["@ReadOnly"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Obsolete", SqlDbType.Bit, 1, "Obsolete"));
            this.sqlUpdate.Parameters["@Obsolete"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Milestone", SqlDbType.Bit, 1, "Milestone"));
            this.sqlUpdate.Parameters["@Milestone"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Communication", SqlDbType.Bit, 1, "Communication"));
            this.sqlUpdate.Parameters["@Communication"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@SkipRelatedFields", SqlDbType.Bit, 1, "SkipRelatedFields"));
            this.sqlUpdate.Parameters["@SkipRelatedFields"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@GoToDisbursements", SqlDbType.Bit, 1, "GoToDisbursements"));
            this.sqlUpdate.Parameters["@GoToDisbursements"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
            this.sqlUpdate.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
            this.sqlUpdate.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
            this.sqlUpdate.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
            this.sqlUpdate.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlUpdate.Parameters["@ts"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ActivityNamePastTenseEng", SqlDbType.NVarChar, 200, "ActivityNamePastTenseEng"));
            this.sqlUpdate.Parameters["@ActivityNamePastTenseEng"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ActivityNamePastTenseFre", SqlDbType.NVarChar, 200, "ActivityNamePastTenseFre"));
            this.sqlUpdate.Parameters["@ActivityNamePastTenseFre"].SourceVersion = DataRowVersion.Current;
            //this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
            //this.sqlUpdate.Parameters["@ts"].SourceVersion = DataRowVersion.Original;

            // 
            // sqlDelete
            // 
            this.sqlDelete.CommandText = "[ActivityCodeDelete]";
            this.sqlDelete.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlDelete.Connection = myDALManager.SqlCon;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ActivityCodeID", System.Data.SqlDbType.Int, 4, "ActivityCodeID"));
            this.sqlDelete.Parameters["@ActivityCodeID"].SourceVersion = DataRowVersion.Original;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
            this.sqlDelete.Parameters["@ts"].SourceVersion = DataRowVersion.Original;



        }


		 public new ActivityConfig.ActivityCodeDataTable Load()
		{
			this.sqlDa.SelectCommand=sqlSelectAll;

            ActivityConfig.ActivityCodeDataTable dt=new ActivityConfig.ActivityCodeDataTable();
			Fill(dt);
            return dt;
        }

	
		
		public ActivityConfig.ActivityCodeDataTable Load(int ActivityCodeID)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[ActivityCodeSelectByActivityCodeID]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ActivityCodeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

			this.sqlSelect.Parameters["@ActivityCodeID"].Value=ActivityCodeID;

            ActivityConfig.ActivityCodeDataTable dt=new ActivityConfig.ActivityCodeDataTable();
			Fill(dt);
            return dt;
		}



	}
	

}
