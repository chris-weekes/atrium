using System;
using System.Data;
using System.Data.SqlClient;
using lmDatasets;


namespace atriumDAL
{
	/// <summary>
	/// Class generated by sgen 
	/// based on ddLookup table 
	/// in lawmate_dev database
	/// on 2014-02-05
	/// </summary>
	public partial class ddLookupDAL:atDAL.ObjectDAL
	{

    	internal ddLookupDAL(atriumDALManager pDALManager) :base(pDALManager)
		  {
			  Init();
		  }

        private void Init()
        {


            this.sqlDa.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
		  new System.Data.Common.DataTableMapping("Table", "ddLookup", new System.Data.Common.DataColumnMapping[] {
		  
		  new System.Data.Common.DataColumnMapping("LookupId", "LookupId"),
		  new System.Data.Common.DataColumnMapping("LookupName", "LookupName"),
		  new System.Data.Common.DataColumnMapping("entryUser", "entryUser"),
		  new System.Data.Common.DataColumnMapping("entryDate", "entryDate"),
		  new System.Data.Common.DataColumnMapping("updateUser", "updateUser"),
		  new System.Data.Common.DataColumnMapping("updateDate", "updateDate"),
		  new System.Data.Common.DataColumnMapping("ts", "ts"),
		  new System.Data.Common.DataColumnMapping("DescriptionEng", "DescriptionEng"),
		  new System.Data.Common.DataColumnMapping("DescriptionFre", "DescriptionFre"),
		  new System.Data.Common.DataColumnMapping("LookupType", "LookupType"),
		  new System.Data.Common.DataColumnMapping("Source", "Source"),
		  new System.Data.Common.DataColumnMapping("WhereClause", "WhereClause"),
		  new System.Data.Common.DataColumnMapping("IncludeObsolete", "IncludeObsolete"),
		  new System.Data.Common.DataColumnMapping("Cache", "Cache"),
		  new System.Data.Common.DataColumnMapping("UseFileContext", "UseFileContext"),
		  new System.Data.Common.DataColumnMapping("ParentId", "ParentId"),
		  new System.Data.Common.DataColumnMapping("PKName", "PKName"),
		  new System.Data.Common.DataColumnMapping("FKName", "FKName"),
		  new System.Data.Common.DataColumnMapping("TableId", "TableId"),
			})});

            // 
            // sqlSelect
            // 
            this.sqlSelect.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelect.Connection = myDALManager.SqlCon;

            this.sqlSelectAll.CommandText = "[ddLookupSelect]";
            this.sqlSelectAll.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelectAll.Connection = myDALManager.SqlCon;
            this.sqlSelectAll.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            // 
            // sqlInsert
            // 
            this.sqlInsert.CommandText = "[ddLookupInsert]";
            this.sqlInsert.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlInsert.Connection = myDALManager.SqlCon;
            this.sqlInsert.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlInsert.Parameters.Add(new SqlParameter("@LookupId", SqlDbType.Int, 10, "LookupId"));
            this.sqlInsert.Parameters["@LookupId"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@LookupName", SqlDbType.NVarChar, 50, "LookupName"));
            this.sqlInsert.Parameters["@LookupName"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
            this.sqlInsert.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
            this.sqlInsert.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
            this.sqlInsert.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
            this.sqlInsert.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlInsert.Parameters["@ts"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@DescriptionEng", SqlDbType.NVarChar, 255, "DescriptionEng"));
            this.sqlInsert.Parameters["@DescriptionEng"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@DescriptionFre", SqlDbType.NVarChar, 255, "DescriptionFre"));
            this.sqlInsert.Parameters["@DescriptionFre"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@LookupType", SqlDbType.NVarChar, 6, "LookupType"));
            this.sqlInsert.Parameters["@LookupType"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Source", SqlDbType.NVarChar, 50, "Source"));
            this.sqlInsert.Parameters["@Source"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar, 512, "WhereClause"));
            this.sqlInsert.Parameters["@WhereClause"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IncludeObsolete", SqlDbType.Bit, 1, "IncludeObsolete"));
            this.sqlInsert.Parameters["@IncludeObsolete"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Cache", SqlDbType.Bit, 1, "Cache"));
            this.sqlInsert.Parameters["@Cache"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@UseFileContext", SqlDbType.Bit, 1, "UseFileContext"));
            this.sqlInsert.Parameters["@UseFileContext"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ParentId", SqlDbType.Int, 10, "ParentId"));
            this.sqlInsert.Parameters["@ParentId"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@PKName", SqlDbType.NVarChar, 50, "PKName"));
            this.sqlInsert.Parameters["@PKName"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@FKName", SqlDbType.NVarChar, 50, "FKName"));
            this.sqlInsert.Parameters["@FKName"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@TableId", SqlDbType.Int, 10, "TableId"));
            this.sqlInsert.Parameters["@TableId"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlUpdate
            // 
            this.sqlUpdate.CommandText = "[ddLookupUpdate]";
            this.sqlUpdate.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlUpdate.Connection = myDALManager.SqlCon;
            this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlUpdate.Parameters.Add(new SqlParameter("@LookupId", SqlDbType.Int, 10, "LookupId"));
            this.sqlUpdate.Parameters["@LookupId"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@LookupName", SqlDbType.NVarChar, 50, "LookupName"));
            this.sqlUpdate.Parameters["@LookupName"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
            this.sqlUpdate.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
            this.sqlUpdate.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
            this.sqlUpdate.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
            this.sqlUpdate.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlUpdate.Parameters["@ts"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@DescriptionEng", SqlDbType.NVarChar, 255, "DescriptionEng"));
            this.sqlUpdate.Parameters["@DescriptionEng"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@DescriptionFre", SqlDbType.NVarChar, 255, "DescriptionFre"));
            this.sqlUpdate.Parameters["@DescriptionFre"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@LookupType", SqlDbType.NVarChar, 6, "LookupType"));
            this.sqlUpdate.Parameters["@LookupType"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Source", SqlDbType.NVarChar, 50, "Source"));
            this.sqlUpdate.Parameters["@Source"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@WhereClause", SqlDbType.NVarChar, 512, "WhereClause"));
            this.sqlUpdate.Parameters["@WhereClause"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IncludeObsolete", SqlDbType.Bit, 1, "IncludeObsolete"));
            this.sqlUpdate.Parameters["@IncludeObsolete"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Cache", SqlDbType.Bit, 1, "Cache"));
            this.sqlUpdate.Parameters["@Cache"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@UseFileContext", SqlDbType.Bit, 1, "UseFileContext"));
            this.sqlUpdate.Parameters["@UseFileContext"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ParentId", SqlDbType.Int, 10, "ParentId"));
            this.sqlUpdate.Parameters["@ParentId"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@PKName", SqlDbType.NVarChar, 50, "PKName"));
            this.sqlUpdate.Parameters["@PKName"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@FKName", SqlDbType.NVarChar, 50, "FKName"));
            this.sqlUpdate.Parameters["@FKName"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@TableId", SqlDbType.Int, 10, "TableId"));
            this.sqlUpdate.Parameters["@TableId"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlDelete
            // 
            this.sqlDelete.CommandText = "[ddLookupDelete]";
            this.sqlDelete.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlDelete.Connection = myDALManager.SqlCon;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LookupId", System.Data.SqlDbType.Int, 4, "LookupId"));
            this.sqlDelete.Parameters["@LookupId"].SourceVersion = DataRowVersion.Original;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
            this.sqlDelete.Parameters["@ts"].SourceVersion = DataRowVersion.Original;



        }

		 public appDB.ddLookupDataTable Load()
		{
			this.sqlDa.SelectCommand=sqlSelectAll;

            appDB.ddLookupDataTable dt=new appDB.ddLookupDataTable();
			Fill(dt);
            return dt;
        }

	
		
		public appDB.ddLookupDataTable Load(int LookupId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[ddLookupSelectByLookupId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LookupId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

			this.sqlSelect.Parameters["@LookupId"].Value=LookupId;

            appDB.ddLookupDataTable dt=new appDB.ddLookupDataTable();
			Fill(dt);
            return dt;
		}



	}
	

}
