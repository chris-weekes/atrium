using System;
using System.Data;
using System.Data.SqlClient;
using lmDatasets;


namespace atriumDAL
{
	/// <summary>
	/// Class generated by sgen 
	/// based on FileFormat table 
	/// in lawmate database
	/// on 3/12/2007
	/// </summary>
	public partial class FileFormatDAL:atDAL.ObjectDAL
	{

    	internal FileFormatDAL(atriumDALManager pDALManager) :base(pDALManager)
		  {
			  Init();
		  }

        private void Init()
        {


            this.sqlDa.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
		  new System.Data.Common.DataTableMapping("Table", "FileFormat", new System.Data.Common.DataColumnMapping[] {
		  
		  new System.Data.Common.DataColumnMapping("FileFormat", "FileFormat"),
		  new System.Data.Common.DataColumnMapping("FileDescEng", "FileDescEng"),
		  new System.Data.Common.DataColumnMapping("FileDescFre", "FileDescFre"),
		  new System.Data.Common.DataColumnMapping("AllowUpload", "AllowUpload"),
		  new System.Data.Common.DataColumnMapping("AllowPreview", "AllowPreview"),
		  new System.Data.Common.DataColumnMapping("AllowSearch", "AllowSearch"),
		  new System.Data.Common.DataColumnMapping("AllowEdit", "AllowEdit"),
		  new System.Data.Common.DataColumnMapping("IsBinary", "IsBinary"),
		  new System.Data.Common.DataColumnMapping("OpenWith", "OpenWith"),
		  new System.Data.Common.DataColumnMapping("Encoding", "Encoding"),
		  new System.Data.Common.DataColumnMapping("EntryUser", "EntryUser"),
		  new System.Data.Common.DataColumnMapping("EntryDate", "EntryDate"),
		  new System.Data.Common.DataColumnMapping("UpdateUser", "UpdateUser"),
		  new System.Data.Common.DataColumnMapping("UpdateDate", "UpdateDate"),
		  new System.Data.Common.DataColumnMapping("ReadOnly", "ReadOnly"),
		  new System.Data.Common.DataColumnMapping("Obsolete", "Obsolete"),
		  new System.Data.Common.DataColumnMapping("ts", "ts"),
			})});

            // 
            // sqlSelect
            // 
            this.sqlSelect.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelect.Connection = myDALManager.SqlCon;

            this.sqlSelectAll.CommandText = "[FileFormatSelect]";
            this.sqlSelectAll.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelectAll.Connection = myDALManager.SqlCon;
            this.sqlSelectAll.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            // 
            // sqlInsert
            // 
            this.sqlInsert.CommandText = "[FileFormatInsert]";
            this.sqlInsert.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlInsert.Connection = myDALManager.SqlCon;
            this.sqlInsert.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlInsert.Parameters.Add(new SqlParameter("@FileFormat", SqlDbType.NVarChar, 10, "FileFormat"));
            this.sqlInsert.Parameters["@FileFormat"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@FileDescEng", SqlDbType.NVarChar, 50, "FileDescEng"));
            this.sqlInsert.Parameters["@FileDescEng"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@FileDescFre", SqlDbType.NVarChar, 50, "FileDescFre"));
            this.sqlInsert.Parameters["@FileDescFre"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AllowUpload", SqlDbType.Bit, 1, "AllowUpload"));
            this.sqlInsert.Parameters["@AllowUpload"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AllowPreview", SqlDbType.Bit, 1, "AllowPreview"));
            this.sqlInsert.Parameters["@AllowPreview"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AllowSearch", SqlDbType.Bit, 1, "AllowSearch"));
            this.sqlInsert.Parameters["@AllowSearch"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AllowEdit", SqlDbType.Bit, 1, "AllowEdit"));
            this.sqlInsert.Parameters["@AllowEdit"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IsBinary", SqlDbType.Bit, 1, "IsBinary"));
            this.sqlInsert.Parameters["@IsBinary"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@OpenWith", SqlDbType.NVarChar, 50, "OpenWith"));
            this.sqlInsert.Parameters["@OpenWith"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Encoding", SqlDbType.NVarChar, 50, "Encoding"));
            this.sqlInsert.Parameters["@Encoding"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@EntryUser", SqlDbType.NVarChar, 20, "EntryUser"));
            this.sqlInsert.Parameters["@EntryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@EntryDate", SqlDbType.SmallDateTime, 24, "EntryDate"));
            this.sqlInsert.Parameters["@EntryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@UpdateUser", SqlDbType.NVarChar, 20, "UpdateUser"));
            this.sqlInsert.Parameters["@UpdateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@UpdateDate", SqlDbType.SmallDateTime, 24, "UpdateDate"));
            this.sqlInsert.Parameters["@UpdateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ReadOnly", SqlDbType.Bit, 1, "ReadOnly"));
            this.sqlInsert.Parameters["@ReadOnly"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@Obsolete", SqlDbType.Bit, 1, "Obsolete"));
            this.sqlInsert.Parameters["@Obsolete"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlInsert.Parameters["@ts"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlUpdate
            // 
            this.sqlUpdate.CommandText = "[FileFormatUpdate]";
            this.sqlUpdate.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlUpdate.Connection = myDALManager.SqlCon;
            this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlUpdate.Parameters.Add(new SqlParameter("@FileFormat", SqlDbType.NVarChar, 10, "FileFormat"));
            this.sqlUpdate.Parameters["@FileFormat"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@FileDescEng", SqlDbType.NVarChar, 50, "FileDescEng"));
            this.sqlUpdate.Parameters["@FileDescEng"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@FileDescFre", SqlDbType.NVarChar, 50, "FileDescFre"));
            this.sqlUpdate.Parameters["@FileDescFre"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowUpload", SqlDbType.Bit, 1, "AllowUpload"));
            this.sqlUpdate.Parameters["@AllowUpload"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowPreview", SqlDbType.Bit, 1, "AllowPreview"));
            this.sqlUpdate.Parameters["@AllowPreview"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowSearch", SqlDbType.Bit, 1, "AllowSearch"));
            this.sqlUpdate.Parameters["@AllowSearch"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowEdit", SqlDbType.Bit, 1, "AllowEdit"));
            this.sqlUpdate.Parameters["@AllowEdit"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IsBinary", SqlDbType.Bit, 1, "IsBinary"));
            this.sqlUpdate.Parameters["@IsBinary"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@OpenWith", SqlDbType.NVarChar, 50, "OpenWith"));
            this.sqlUpdate.Parameters["@OpenWith"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Encoding", SqlDbType.NVarChar, 50, "Encoding"));
            this.sqlUpdate.Parameters["@Encoding"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@EntryUser", SqlDbType.NVarChar, 20, "EntryUser"));
            this.sqlUpdate.Parameters["@EntryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@EntryDate", SqlDbType.SmallDateTime, 24, "EntryDate"));
            this.sqlUpdate.Parameters["@EntryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@UpdateUser", SqlDbType.NVarChar, 20, "UpdateUser"));
            this.sqlUpdate.Parameters["@UpdateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@UpdateDate", SqlDbType.SmallDateTime, 24, "UpdateDate"));
            this.sqlUpdate.Parameters["@UpdateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ReadOnly", SqlDbType.Bit, 1, "ReadOnly"));
            this.sqlUpdate.Parameters["@ReadOnly"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@Obsolete", SqlDbType.Bit, 1, "Obsolete"));
            this.sqlUpdate.Parameters["@Obsolete"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlUpdate.Parameters["@ts"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlDelete
            // 
            this.sqlDelete.CommandText = "[FileFormatDelete]";
            this.sqlDelete.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlDelete.Connection = myDALManager.SqlCon;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileFormat", System.Data.SqlDbType.NVarChar, 10, "FileFormat"));
            this.sqlDelete.Parameters["@FileFormat"].SourceVersion = DataRowVersion.Original;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
            this.sqlDelete.Parameters["@ts"].SourceVersion = DataRowVersion.Original;



        }

		 public docDB.FileFormatDataTable Load()
		{
			this.sqlDa.SelectCommand=sqlSelectAll;

            docDB.FileFormatDataTable dt=new docDB.FileFormatDataTable();
			Fill(dt);
            return dt;
        }

	
		
		public docDB.FileFormatDataTable Load(string FileFormat)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[FileFormatSelectByFileFormat]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileFormat", System.Data.SqlDbType.NVarChar, 10, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

			this.sqlSelect.Parameters["@FileFormat"].Value=FileFormat;

            docDB.FileFormatDataTable dt=new docDB.FileFormatDataTable();
			Fill(dt);
            return dt;
		}



	}
	

}
