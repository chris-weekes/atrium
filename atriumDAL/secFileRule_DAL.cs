using System;
using System.Data;
using System.Data.SqlClient;
using lmDatasets;


namespace atriumDAL
{
	/// <summary>
	/// Class generated by sgen 
	/// based on secFileRule table 
	/// in lawmate database
	/// on 1/3/2007
	/// </summary>
	public partial class secFileRuleDAL:atDAL.ObjectDAL
	{

    	internal secFileRuleDAL(atriumDALManager pDALManager) :base(pDALManager)
		  {
			  Init();
		  }

          private void Init()
          {


              this.sqlDa.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
		  new System.Data.Common.DataTableMapping("Table", "secFileRule", new System.Data.Common.DataColumnMapping[] {
		  
		  new System.Data.Common.DataColumnMapping("Id", "Id"),
		  new System.Data.Common.DataColumnMapping("FileId", "FileId"),
		  new System.Data.Common.DataColumnMapping("RuleId", "RuleId"),
		  new System.Data.Common.DataColumnMapping("GroupId", "GroupId"),
		  new System.Data.Common.DataColumnMapping("ApplyTo", "ApplyTo"),
		  new System.Data.Common.DataColumnMapping("Disabled", "Disabled"),
		  new System.Data.Common.DataColumnMapping("Inherited", "Inherited"),
		  new System.Data.Common.DataColumnMapping("StartDate", "StartDate"),
		  new System.Data.Common.DataColumnMapping("EndDate", "EndDate"),
		  new System.Data.Common.DataColumnMapping("entryUser", "entryUser"),
		  new System.Data.Common.DataColumnMapping("entryDate", "entryDate"),
		  new System.Data.Common.DataColumnMapping("updateUser", "updateUser"),
		  new System.Data.Common.DataColumnMapping("updateDate", "updateDate"),
		  new System.Data.Common.DataColumnMapping("ts", "ts"),
			})});

              // 
              // sqlSelect
              // 
              this.sqlSelect.CommandType = System.Data.CommandType.StoredProcedure;
              this.sqlSelect.Connection = myDALManager.SqlCon;

              this.sqlSelectAll.CommandText = "[secFileRuleSelect]";
              this.sqlSelectAll.CommandType = System.Data.CommandType.StoredProcedure;
              this.sqlSelectAll.Connection = myDALManager.SqlCon;
              this.sqlSelectAll.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

              // 
              // sqlInsert
              // 
              this.sqlInsert.CommandText = "[secFileRuleInsert]";
              this.sqlInsert.CommandType = System.Data.CommandType.StoredProcedure;
              this.sqlInsert.Connection = myDALManager.SqlCon;
              this.sqlInsert.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

              this.sqlInsert.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 10, "Id"));
              this.sqlInsert.Parameters["@Id"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int, 10, "FileId"));
              this.sqlInsert.Parameters["@FileId"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@RuleId", SqlDbType.Int, 10, "RuleId"));
              this.sqlInsert.Parameters["@RuleId"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@GroupId", SqlDbType.Int, 10, "GroupId"));
              this.sqlInsert.Parameters["@GroupId"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@ApplyTo", SqlDbType.Int, 10, "ApplyTo"));
              this.sqlInsert.Parameters["@ApplyTo"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@Disabled", SqlDbType.Bit, 1, "Disabled"));
              this.sqlInsert.Parameters["@Disabled"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@Inherited", SqlDbType.Bit, 1, "Inherited"));
              this.sqlInsert.Parameters["@Inherited"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@StartDate", SqlDbType.SmallDateTime, 24, "StartDate"));
              this.sqlInsert.Parameters["@StartDate"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@EndDate", SqlDbType.SmallDateTime, 24, "EndDate"));
              this.sqlInsert.Parameters["@EndDate"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
              this.sqlInsert.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
              this.sqlInsert.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
              this.sqlInsert.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
              this.sqlInsert.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
              this.sqlInsert.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
              this.sqlInsert.Parameters["@ts"].SourceVersion = DataRowVersion.Current;

              // 
              // sqlUpdate
              // 
              this.sqlUpdate.CommandText = "[secFileRuleUpdate]";
              this.sqlUpdate.CommandType = System.Data.CommandType.StoredProcedure;
              this.sqlUpdate.Connection = myDALManager.SqlCon;
              this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

              this.sqlUpdate.Parameters.Add(new SqlParameter("@Id", SqlDbType.Int, 10, "Id"));
              this.sqlUpdate.Parameters["@Id"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int, 10, "FileId"));
              this.sqlUpdate.Parameters["@FileId"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@RuleId", SqlDbType.Int, 10, "RuleId"));
              this.sqlUpdate.Parameters["@RuleId"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@GroupId", SqlDbType.Int, 10, "GroupId"));
              this.sqlUpdate.Parameters["@GroupId"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@ApplyTo", SqlDbType.Int, 10, "ApplyTo"));
              this.sqlUpdate.Parameters["@ApplyTo"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@Disabled", SqlDbType.Bit, 1, "Disabled"));
              this.sqlUpdate.Parameters["@Disabled"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@Inherited", SqlDbType.Bit, 1, "Inherited"));
              this.sqlUpdate.Parameters["@Inherited"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@StartDate", SqlDbType.SmallDateTime, 24, "StartDate"));
              this.sqlUpdate.Parameters["@StartDate"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@EndDate", SqlDbType.SmallDateTime, 24, "EndDate"));
              this.sqlUpdate.Parameters["@EndDate"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
              this.sqlUpdate.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
              this.sqlUpdate.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
              this.sqlUpdate.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
              this.sqlUpdate.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
              this.sqlUpdate.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
              this.sqlUpdate.Parameters["@ts"].SourceVersion = DataRowVersion.Current;

              // 
              // sqlDelete
              // 
              this.sqlDelete.CommandText = "[secFileRuleDelete]";
              this.sqlDelete.CommandType = System.Data.CommandType.StoredProcedure;
              this.sqlDelete.Connection = myDALManager.SqlCon;
              this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
              this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 4, "Id"));
              this.sqlDelete.Parameters["@Id"].SourceVersion = DataRowVersion.Original;
              this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
              this.sqlDelete.Parameters["@ts"].SourceVersion = DataRowVersion.Original;



          }

 

		 public atriumDB.secFileRuleDataTable Load()
		{
			this.sqlDa.SelectCommand=sqlSelectAll;

            atriumDB.secFileRuleDataTable dt = new atriumDB.secFileRuleDataTable();
			Fill(dt);
            return dt;
        }



         public atriumDB.secFileRuleDataTable Load(int Id)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[secFileRuleSelectById]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

			this.sqlSelect.Parameters["@Id"].Value=Id;

            atriumDB.secFileRuleDataTable dt = new atriumDB.secFileRuleDataTable();
			Fill(dt);
            return dt;
		}


         public atriumDB.secFileRuleDataTable LoadByFileId(int FileId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[secFileRuleSelectByFileId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters["@FileId"].Value=FileId;

            atriumDB.secFileRuleDataTable dt = new atriumDB.secFileRuleDataTable();
			Fill(dt);
            return dt;
		}



         public atriumDB.secFileRuleDataTable LoadByGroupId(int GroupId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[secFileRuleSelectByGroupId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters["@GroupId"].Value=GroupId;

            atriumDB.secFileRuleDataTable dt = new atriumDB.secFileRuleDataTable();
			Fill(dt);
            return dt;
		}



         public atriumDB.secFileRuleDataTable LoadByRuleId(int RuleId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[secFileRuleSelectByRuleId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RuleId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters["@RuleId"].Value=RuleId;

            atriumDB.secFileRuleDataTable dt = new atriumDB.secFileRuleDataTable();
			Fill(dt);
            return dt;
		}




	}
	

}
