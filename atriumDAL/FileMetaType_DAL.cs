using System;
using System.Data;
using System.Data.SqlClient;
using lmDatasets;


namespace atriumDAL
{
	/// <summary>
	/// Class generated by sgen 
	/// based on FileMetaType table 
	/// in atrium database
	/// on 6/7/2007
	/// </summary>
	public partial class FileMetaTypeDAL:atDAL.ObjectDAL
	{

    	internal FileMetaTypeDAL(atriumDALManager pDALManager) :base(pDALManager)
		  {
			  Init();
		  }

        private void Init()
		{


			this.sqlDa.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
		  new System.Data.Common.DataTableMapping("Table", "FileMetaType", new System.Data.Common.DataColumnMapping[] {
		  
		  new System.Data.Common.DataColumnMapping("MetaTypeCode", "MetaTypeCode"),
		  new System.Data.Common.DataColumnMapping("MetaTypeDescEng", "MetaTypeDescEng"),
		  new System.Data.Common.DataColumnMapping("MetaTypeDescFre", "MetaTypeDescFre"),
		  new System.Data.Common.DataColumnMapping("IsContainer", "IsContainer"),
		  new System.Data.Common.DataColumnMapping("IsFile", "IsFile"),
		  new System.Data.Common.DataColumnMapping("HasFileNumber", "HasFileNumber"),
		  new System.Data.Common.DataColumnMapping("AllowSubFiles", "AllowSubFiles"),
		  new System.Data.Common.DataColumnMapping("AllowPockets", "AllowPockets"),
		  new System.Data.Common.DataColumnMapping("CanArchive", "CanArchive"),
		  new System.Data.Common.DataColumnMapping("CreateGeneralPocket", "CreateGeneralPocket"),
		  new System.Data.Common.DataColumnMapping("AllowDocs", "AllowDocs"),
		  new System.Data.Common.DataColumnMapping("AllowActivities", "AllowActivities"),
		  new System.Data.Common.DataColumnMapping("HasTOC", "HasTOC"),
		  new System.Data.Common.DataColumnMapping("IncludeSubFileInTOC", "IncludeSubFileInTOC"),
		  new System.Data.Common.DataColumnMapping("SubFileMetaType", "SubFileMetaType"),
		  new System.Data.Common.DataColumnMapping("SubFileNumSize", "SubFileNumSize"),
		  new System.Data.Common.DataColumnMapping("SubFileAutoNumber", "SubFileAutoNumber"),
		  new System.Data.Common.DataColumnMapping("SubFileNumIncrement", "SubFileNumIncrement"),
          new System.Data.Common.DataColumnMapping("AllowXref", "AllowXref"),
          new System.Data.Common.DataColumnMapping("AllowShortcuts", "AllowShortcuts"),
		  new System.Data.Common.DataColumnMapping("ReadOnly", "ReadOnly"),
		  new System.Data.Common.DataColumnMapping("Obsolete", "Obsolete"),
		  new System.Data.Common.DataColumnMapping("entryUser", "entryUser"),
		  new System.Data.Common.DataColumnMapping("entryDate", "entryDate"),
		  new System.Data.Common.DataColumnMapping("updateUser", "updateUser"),
		  new System.Data.Common.DataColumnMapping("updateDate", "updateDate"),
		  new System.Data.Common.DataColumnMapping("ts", "ts"),
          new System.Data.Common.DataColumnMapping("isBillable", "isBillable"),
            })});
			
			// 
			// sqlSelect
			// 
			this.sqlSelect.CommandType = System.Data.CommandType.StoredProcedure;
			this.sqlSelect.Connection=myDALManager.SqlCon;

			this.sqlSelectAll.CommandText = "[FileMetaTypeSelect]";
			this.sqlSelectAll.CommandType = System.Data.CommandType.StoredProcedure;
			this.sqlSelectAll.Connection=myDALManager.SqlCon;
			this.sqlSelectAll.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4,	System.Data.ParameterDirection.ReturnValue,	false, ((System.Byte)(10)),	((System.Byte)(0)),	"",	System.Data.DataRowVersion.Current,	null));

			// 
			// sqlInsert
			// 
			this.sqlInsert.CommandText = "[FileMetaTypeInsert]";
			this.sqlInsert.CommandType = System.Data.CommandType.StoredProcedure;
			this.sqlInsert.Connection=myDALManager.SqlCon;
			this.sqlInsert.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			
			this.sqlInsert.Parameters.Add(new SqlParameter("@MetaTypeCode", SqlDbType.NVarChar, 6, "MetaTypeCode"));
			this.sqlInsert.Parameters["@MetaTypeCode"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@MetaTypeDescEng", SqlDbType.NVarChar, 50, "MetaTypeDescEng"));
			this.sqlInsert.Parameters["@MetaTypeDescEng"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@MetaTypeDescFre", SqlDbType.NVarChar, 50, "MetaTypeDescFre"));
			this.sqlInsert.Parameters["@MetaTypeDescFre"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@IsContainer", SqlDbType.Bit, 1, "IsContainer"));
			this.sqlInsert.Parameters["@IsContainer"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@IsFile", SqlDbType.Bit, 1, "IsFile"));
			this.sqlInsert.Parameters["@IsFile"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@HasFileNumber", SqlDbType.Bit, 1, "HasFileNumber"));
			this.sqlInsert.Parameters["@HasFileNumber"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@AllowSubFiles", SqlDbType.Bit, 1, "AllowSubFiles"));
			this.sqlInsert.Parameters["@AllowSubFiles"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@AllowPockets", SqlDbType.Bit, 1, "AllowPockets"));
			this.sqlInsert.Parameters["@AllowPockets"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@CanArchive", SqlDbType.Bit, 1, "CanArchive"));
			this.sqlInsert.Parameters["@CanArchive"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@CreateGeneralPocket", SqlDbType.Bit, 1, "CreateGeneralPocket"));
			this.sqlInsert.Parameters["@CreateGeneralPocket"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@AllowDocs", SqlDbType.Bit, 1, "AllowDocs"));
			this.sqlInsert.Parameters["@AllowDocs"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@AllowActivities", SqlDbType.Bit, 1, "AllowActivities"));
			this.sqlInsert.Parameters["@AllowActivities"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@HasTOC", SqlDbType.Bit, 1, "HasTOC"));
			this.sqlInsert.Parameters["@HasTOC"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@IncludeSubFileInTOC", SqlDbType.Bit, 1, "IncludeSubFileInTOC"));
			this.sqlInsert.Parameters["@IncludeSubFileInTOC"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@SubFileMetaType", SqlDbType.NVarChar, 6, "SubFileMetaType"));
			this.sqlInsert.Parameters["@SubFileMetaType"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@SubFileNumSize", SqlDbType.Int, 10, "SubFileNumSize"));
			this.sqlInsert.Parameters["@SubFileNumSize"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@SubFileAutoNumber", SqlDbType.Bit, 1, "SubFileAutoNumber"));
			this.sqlInsert.Parameters["@SubFileAutoNumber"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@SubFileNumIncrement", SqlDbType.Int, 10, "SubFileNumIncrement"));
			this.sqlInsert.Parameters["@SubFileNumIncrement"].SourceVersion=DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AllowXref", SqlDbType.Bit, 1, "AllowXref"));
            this.sqlInsert.Parameters["@AllowXref"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@AllowShortcuts", SqlDbType.Bit, 1, "AllowShortcuts"));
            this.sqlInsert.Parameters["@AllowShortcuts"].SourceVersion = DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@ReadOnly", SqlDbType.Bit, 1, "ReadOnly"));
			this.sqlInsert.Parameters["@ReadOnly"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@Obsolete", SqlDbType.Bit, 1, "Obsolete"));
			this.sqlInsert.Parameters["@Obsolete"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
			this.sqlInsert.Parameters["@entryUser"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
			this.sqlInsert.Parameters["@entryDate"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
			this.sqlInsert.Parameters["@updateUser"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
			this.sqlInsert.Parameters["@updateDate"].SourceVersion=DataRowVersion.Current;
			this.sqlInsert.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
			this.sqlInsert.Parameters["@ts"].SourceVersion=DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@isBillable", SqlDbType.Bit, 1, "isBillable"));
            this.sqlInsert.Parameters["@isBillable"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlUpdate
            // 
            this.sqlUpdate.CommandText = "[FileMetaTypeUpdate]";
			this.sqlUpdate.CommandType = System.Data.CommandType.StoredProcedure;
			this.sqlUpdate.Connection=myDALManager.SqlCon;
			this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			
			this.sqlUpdate.Parameters.Add(new SqlParameter("@MetaTypeCode", SqlDbType.NVarChar, 6, "MetaTypeCode"));
			this.sqlUpdate.Parameters["@MetaTypeCode"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@MetaTypeDescEng", SqlDbType.NVarChar, 50, "MetaTypeDescEng"));
			this.sqlUpdate.Parameters["@MetaTypeDescEng"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@MetaTypeDescFre", SqlDbType.NVarChar, 50, "MetaTypeDescFre"));
			this.sqlUpdate.Parameters["@MetaTypeDescFre"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@IsContainer", SqlDbType.Bit, 1, "IsContainer"));
			this.sqlUpdate.Parameters["@IsContainer"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@IsFile", SqlDbType.Bit, 1, "IsFile"));
			this.sqlUpdate.Parameters["@IsFile"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@HasFileNumber", SqlDbType.Bit, 1, "HasFileNumber"));
			this.sqlUpdate.Parameters["@HasFileNumber"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowSubFiles", SqlDbType.Bit, 1, "AllowSubFiles"));
			this.sqlUpdate.Parameters["@AllowSubFiles"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowPockets", SqlDbType.Bit, 1, "AllowPockets"));
			this.sqlUpdate.Parameters["@AllowPockets"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@CanArchive", SqlDbType.Bit, 1, "CanArchive"));
			this.sqlUpdate.Parameters["@CanArchive"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@CreateGeneralPocket", SqlDbType.Bit, 1, "CreateGeneralPocket"));
			this.sqlUpdate.Parameters["@CreateGeneralPocket"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowDocs", SqlDbType.Bit, 1, "AllowDocs"));
			this.sqlUpdate.Parameters["@AllowDocs"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowActivities", SqlDbType.Bit, 1, "AllowActivities"));
			this.sqlUpdate.Parameters["@AllowActivities"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@HasTOC", SqlDbType.Bit, 1, "HasTOC"));
			this.sqlUpdate.Parameters["@HasTOC"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@IncludeSubFileInTOC", SqlDbType.Bit, 1, "IncludeSubFileInTOC"));
			this.sqlUpdate.Parameters["@IncludeSubFileInTOC"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@SubFileMetaType", SqlDbType.NVarChar, 6, "SubFileMetaType"));
			this.sqlUpdate.Parameters["@SubFileMetaType"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@SubFileNumSize", SqlDbType.Int, 10, "SubFileNumSize"));
			this.sqlUpdate.Parameters["@SubFileNumSize"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@SubFileAutoNumber", SqlDbType.Bit, 1, "SubFileAutoNumber"));
			this.sqlUpdate.Parameters["@SubFileAutoNumber"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@SubFileNumIncrement", SqlDbType.Int, 10, "SubFileNumIncrement"));
			this.sqlUpdate.Parameters["@SubFileNumIncrement"].SourceVersion=DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowXref", SqlDbType.Bit, 1, "AllowXref"));
            this.sqlUpdate.Parameters["@AllowXref"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@AllowShortcuts", SqlDbType.Bit, 1, "AllowShortcuts"));
            this.sqlUpdate.Parameters["@AllowShortcuts"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ReadOnly", SqlDbType.Bit, 1, "ReadOnly"));
			this.sqlUpdate.Parameters["@ReadOnly"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@Obsolete", SqlDbType.Bit, 1, "Obsolete"));
			this.sqlUpdate.Parameters["@Obsolete"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
			this.sqlUpdate.Parameters["@entryUser"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
			this.sqlUpdate.Parameters["@entryDate"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
			this.sqlUpdate.Parameters["@updateUser"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
			this.sqlUpdate.Parameters["@updateDate"].SourceVersion=DataRowVersion.Current;
            //this.sqlUpdate.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            //this.sqlUpdate.Parameters["@ts"].SourceVersion=DataRowVersion.Current;
			this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
		    this.sqlUpdate.Parameters["@ts"].SourceVersion=DataRowVersion.Original;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@isBillable", SqlDbType.Bit, 1, "isBillable"));
            this.sqlUpdate.Parameters["@isBillable"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlDelete
            // 
            this.sqlDelete.CommandText = "[FileMetaTypeDelete]";
			this.sqlDelete.CommandType = System.Data.CommandType.StoredProcedure;
			this.sqlDelete.Connection=myDALManager.SqlCon;
			this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MetaTypeCode", System.Data.SqlDbType.NVarChar, 6, "MetaTypeCode"));
		    this.sqlDelete.Parameters["@MetaTypeCode"].SourceVersion=DataRowVersion.Original;
			this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
		    this.sqlDelete.Parameters["@ts"].SourceVersion=DataRowVersion.Original;



		}

		 public atriumDB.FileMetaTypeDataTable Load()
		{
			this.sqlDa.SelectCommand=sqlSelectAll;

            atriumDB.FileMetaTypeDataTable dt=new atriumDB.FileMetaTypeDataTable();
			Fill(dt);
            return dt;
        }

	
		
		public atriumDB.FileMetaTypeDataTable Load(string MetaTypeCode)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[FileMetaTypeSelectByMetaTypeCode]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MetaTypeCode", System.Data.SqlDbType.NVarChar, 6, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

			this.sqlSelect.Parameters["@MetaTypeCode"].Value=MetaTypeCode;

            atriumDB.FileMetaTypeDataTable dt=new atriumDB.FileMetaTypeDataTable();
			Fill(dt);
            return dt;
		}



	}
	

}
