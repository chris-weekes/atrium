using System;
using System.Data;
using System.Data.SqlClient;
using lmDatasets;


namespace atriumDAL
{
	/// <summary>
	/// Class generated by sgen 
	/// based on FileOffice table 
	/// in atrium database
	/// on 3/14/2007
	/// </summary>
	public partial class FileOfficeDAL:atDAL.ObjectDAL
	{

    	internal FileOfficeDAL(atriumDALManager pDALManager) :base(pDALManager)
		  {
			  Init();
		  }

        private void Init()
        {


            this.sqlDa.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
		  new System.Data.Common.DataTableMapping("Table", "FileOffice", new System.Data.Common.DataColumnMapping[] {
		  
		    new System.Data.Common.DataColumnMapping("FileOfficeId", "FileOfficeId"),
		    new System.Data.Common.DataColumnMapping("FileId", "FileId"),
		    new System.Data.Common.DataColumnMapping("OfficeId", "OfficeId"),
		    new System.Data.Common.DataColumnMapping("IsOwner", "IsOwner"),
		    new System.Data.Common.DataColumnMapping("IsLead", "IsLead"),
		    new System.Data.Common.DataColumnMapping("IsAgent", "IsAgent"),
		    new System.Data.Common.DataColumnMapping("IsClient", "IsClient"),
            new System.Data.Common.DataColumnMapping("PercentAlloc", "PercentAlloc"),
		    new System.Data.Common.DataColumnMapping("OfficeFileNum", "OfficeFileNum"),
		    new System.Data.Common.DataColumnMapping("entryUser", "entryUser"),
		    new System.Data.Common.DataColumnMapping("entryDate", "entryDate"),
		    new System.Data.Common.DataColumnMapping("updateUser", "updateUser"),
		    new System.Data.Common.DataColumnMapping("updateDate", "updateDate"),
		    new System.Data.Common.DataColumnMapping("ts", "ts"),
            new System.Data.Common.DataColumnMapping("OrderNumber", "OrderNumber"),
            new System.Data.Common.DataColumnMapping("IsPrimary", "IsPrimary"),
			})});

            // 
            // sqlSelect
            // 
            this.sqlSelect.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelect.Connection = myDALManager.SqlCon;

            this.sqlSelectAll.CommandText = "[FileOfficeSelect]";
            this.sqlSelectAll.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlSelectAll.Connection = myDALManager.SqlCon;
            this.sqlSelectAll.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            // 
            // sqlInsert
            // 
            this.sqlInsert.CommandText = "[FileOfficeInsert]";
            this.sqlInsert.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlInsert.Connection = myDALManager.SqlCon;
            this.sqlInsert.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlInsert.Parameters.Add(new SqlParameter("@FileOfficeId", SqlDbType.Int, 10, "FileOfficeId"));
            this.sqlInsert.Parameters["@FileOfficeId"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int, 10, "FileId"));
            this.sqlInsert.Parameters["@FileId"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@OfficeId", SqlDbType.Int, 10, "OfficeId"));
            this.sqlInsert.Parameters["@OfficeId"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IsOwner", SqlDbType.Bit, 1, "IsOwner"));
            this.sqlInsert.Parameters["@IsOwner"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IsLead", SqlDbType.Bit, 1, "IsLead"));
            this.sqlInsert.Parameters["@IsLead"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IsAgent", SqlDbType.Bit, 1, "IsAgent"));
            this.sqlInsert.Parameters["@IsAgent"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IsClient", SqlDbType.Bit, 1, "IsClient"));
            this.sqlInsert.Parameters["@IsClient"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@PercentAlloc", SqlDbType.Decimal, 50, "PercentAlloc"));
            this.sqlInsert.Parameters["@PercentAlloc"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@OfficeFileNum", SqlDbType.NVarChar, 50, "OfficeFileNum"));
            this.sqlInsert.Parameters["@OfficeFileNum"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
            this.sqlInsert.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
            this.sqlInsert.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
            this.sqlInsert.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
            this.sqlInsert.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlInsert.Parameters["@ts"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@OrderNumber", SqlDbType.NVarChar, 20, "OrderNumber"));
            this.sqlInsert.Parameters["@OrderNumber"].SourceVersion = DataRowVersion.Current;
            this.sqlInsert.Parameters.Add(new SqlParameter("@IsPrimary", SqlDbType.Bit, 1, "IsPrimary"));
            this.sqlInsert.Parameters["@IsPrimary"].SourceVersion = DataRowVersion.Current;


            // 
            // sqlUpdate
            // 
            this.sqlUpdate.CommandText = "[FileOfficeUpdate]";
            this.sqlUpdate.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlUpdate.Connection = myDALManager.SqlCon;
            this.sqlUpdate.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

            this.sqlUpdate.Parameters.Add(new SqlParameter("@FileOfficeId", SqlDbType.Int, 10, "FileOfficeId"));
            this.sqlUpdate.Parameters["@FileOfficeId"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int, 10, "FileId"));
            this.sqlUpdate.Parameters["@FileId"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@OfficeId", SqlDbType.Int, 10, "OfficeId"));
            this.sqlUpdate.Parameters["@OfficeId"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IsOwner", SqlDbType.Bit, 1, "IsOwner"));
            this.sqlUpdate.Parameters["@IsOwner"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IsLead", SqlDbType.Bit, 1, "IsLead"));
            this.sqlUpdate.Parameters["@IsLead"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IsAgent", SqlDbType.Bit, 1, "IsAgent"));
            this.sqlUpdate.Parameters["@IsAgent"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IsClient", SqlDbType.Bit, 1, "IsClient"));
            this.sqlUpdate.Parameters["@IsClient"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@PercentAlloc", SqlDbType.Decimal, 50, "PercentAlloc"));
            this.sqlUpdate.Parameters["@PercentAlloc"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@OfficeFileNum", SqlDbType.NVarChar, 50, "OfficeFileNum"));
            this.sqlUpdate.Parameters["@OfficeFileNum"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@entryUser", SqlDbType.NVarChar, 20, "entryUser"));
            this.sqlUpdate.Parameters["@entryUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@entryDate", SqlDbType.SmallDateTime, 24, "entryDate"));
            this.sqlUpdate.Parameters["@entryDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@updateUser", SqlDbType.NVarChar, 20, "updateUser"));
            this.sqlUpdate.Parameters["@updateUser"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@updateDate", SqlDbType.SmallDateTime, 24, "updateDate"));
            this.sqlUpdate.Parameters["@updateDate"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@ts", SqlDbType.Timestamp, 50, "ts"));
            this.sqlUpdate.Parameters["@ts"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@OrderNumber", SqlDbType.NVarChar, 20, "OrderNumber"));
            this.sqlUpdate.Parameters["@OrderNumber"].SourceVersion = DataRowVersion.Current;
            this.sqlUpdate.Parameters.Add(new SqlParameter("@IsPrimary", SqlDbType.Bit, 1, "IsPrimary"));
            this.sqlUpdate.Parameters["@IsPrimary"].SourceVersion = DataRowVersion.Current;

            // 
            // sqlDelete
            // 
            this.sqlDelete.CommandText = "[FileOfficeDelete]";
            this.sqlDelete.CommandType = System.Data.CommandType.StoredProcedure;
            this.sqlDelete.Connection = myDALManager.SqlCon;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileOfficeId", System.Data.SqlDbType.Int, 4, "FileOfficeId"));
            this.sqlDelete.Parameters["@FileOfficeId"].SourceVersion = DataRowVersion.Original;
            this.sqlDelete.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ts", System.Data.SqlDbType.Timestamp, 50, "ts"));
            this.sqlDelete.Parameters["@ts"].SourceVersion = DataRowVersion.Original;



        }


		 public atriumDB.FileOfficeDataTable Load()
		{
			this.sqlDa.SelectCommand=sqlSelectAll;

            atriumDB.FileOfficeDataTable dt=new atriumDB.FileOfficeDataTable();
			Fill(dt);
            return dt;
        }

	
		
		public atriumDB.FileOfficeDataTable Load(int FileOfficeId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[FileOfficeSelectByFileOfficeId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileOfficeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));

			this.sqlSelect.Parameters["@FileOfficeId"].Value=FileOfficeId;

            atriumDB.FileOfficeDataTable dt=new atriumDB.FileOfficeDataTable();
			Fill(dt);
            return dt;
		}


		public atriumDB.FileOfficeDataTable LoadByFileId(int FileId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[FileOfficeSelectByFileId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters["@FileId"].Value=FileId;

            atriumDB.FileOfficeDataTable dt=new atriumDB.FileOfficeDataTable();
			Fill(dt);
            return dt;
		}



		public atriumDB.FileOfficeDataTable LoadByOfficeId(int OfficeId)
		{
			this.sqlDa.SelectCommand=sqlSelect;
			this.sqlSelect.Parameters.Clear();
			this.sqlSelect.CommandText = "[FileOfficeSelectByOfficeId]";
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OfficeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
			this.sqlSelect.Parameters["@OfficeId"].Value=OfficeId;

            atriumDB.FileOfficeDataTable dt=new atriumDB.FileOfficeDataTable();
			Fill(dt);
            return dt;
		}




	}
	

}
