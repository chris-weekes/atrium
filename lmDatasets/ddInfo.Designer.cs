//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace lmDatasets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ddInfo")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ddInfo : global::System.Data.DataSet {
        
        private ddFieldDataTable tableddField;
        
        private ddTableDataTable tableddTable;
        
        private global::System.Data.DataRelation relationddTable_ddField;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ddInfo() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ddInfo(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ddField"] != null)) {
                    base.Tables.Add(new ddFieldDataTable(ds.Tables["ddField"]));
                }
                if ((ds.Tables["ddTable"] != null)) {
                    base.Tables.Add(new ddTableDataTable(ds.Tables["ddTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ddFieldDataTable ddField {
            get {
                return this.tableddField;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ddTableDataTable ddTable {
            get {
                return this.tableddTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ddInfo cln = ((ddInfo)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ddField"] != null)) {
                    base.Tables.Add(new ddFieldDataTable(ds.Tables["ddField"]));
                }
                if ((ds.Tables["ddTable"] != null)) {
                    base.Tables.Add(new ddTableDataTable(ds.Tables["ddTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableddField = ((ddFieldDataTable)(base.Tables["ddField"]));
            if ((initTable == true)) {
                if ((this.tableddField != null)) {
                    this.tableddField.InitVars();
                }
            }
            this.tableddTable = ((ddTableDataTable)(base.Tables["ddTable"]));
            if ((initTable == true)) {
                if ((this.tableddTable != null)) {
                    this.tableddTable.InitVars();
                }
            }
            this.relationddTable_ddField = this.Relations["ddTable_ddField"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ddInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ddInfo.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableddField = new ddFieldDataTable();
            base.Tables.Add(this.tableddField);
            this.tableddTable = new ddTableDataTable();
            base.Tables.Add(this.tableddTable);
            this.relationddTable_ddField = new global::System.Data.DataRelation("ddTable_ddField", new global::System.Data.DataColumn[] {
                        this.tableddTable.TableIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableddField.TableIdColumn}, false);
            this.Relations.Add(this.relationddTable_ddField);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeddField() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeddTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ddInfo ds = new ddInfo();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ddFieldRowChangeEventHandler(object sender, ddFieldRowChangeEvent e);
        
        public delegate void ddTableRowChangeEventHandler(object sender, ddTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ddFieldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTableId;
            
            private global::System.Data.DataColumn columnTableName;
            
            private global::System.Data.DataColumn columnFieldId;
            
            private global::System.Data.DataColumn columnFieldName;
            
            private global::System.Data.DataColumn columnLeftEng;
            
            private global::System.Data.DataColumn columnLeftFre;
            
            private global::System.Data.DataColumn columnDataType;
            
            private global::System.Data.DataColumn columnFieldType;
            
            private global::System.Data.DataColumn columnLookup;
            
            private global::System.Data.DataColumn columnTopEng;
            
            private global::System.Data.DataColumn columnTopFre;
            
            private global::System.Data.DataColumn columnDescEng;
            
            private global::System.Data.DataColumn columnDescFre;
            
            private global::System.Data.DataColumn columnToolEng;
            
            private global::System.Data.DataColumn columnToolFre;
            
            private global::System.Data.DataColumn columnHelpEng;
            
            private global::System.Data.DataColumn columnHelpFre;
            
            private global::System.Data.DataColumn columnentryUser;
            
            private global::System.Data.DataColumn columnentryDate;
            
            private global::System.Data.DataColumn columnupdateUser;
            
            private global::System.Data.DataColumn columnupdateDate;
            
            private global::System.Data.DataColumn columnts;
            
            private global::System.Data.DataColumn columnisDBField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldDataTable() {
                this.TableName = "ddField";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ddFieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ddFieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableIdColumn {
                get {
                    return this.columnTableId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FieldIdColumn {
                get {
                    return this.columnFieldId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FieldNameColumn {
                get {
                    return this.columnFieldName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftEngColumn {
                get {
                    return this.columnLeftEng;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftFreColumn {
                get {
                    return this.columnLeftFre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FieldTypeColumn {
                get {
                    return this.columnFieldType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LookupColumn {
                get {
                    return this.columnLookup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopEngColumn {
                get {
                    return this.columnTopEng;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopFreColumn {
                get {
                    return this.columnTopFre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescEngColumn {
                get {
                    return this.columnDescEng;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescFreColumn {
                get {
                    return this.columnDescFre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToolEngColumn {
                get {
                    return this.columnToolEng;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToolFreColumn {
                get {
                    return this.columnToolFre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HelpEngColumn {
                get {
                    return this.columnHelpEng;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HelpFreColumn {
                get {
                    return this.columnHelpFre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn entryUserColumn {
                get {
                    return this.columnentryUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn entryDateColumn {
                get {
                    return this.columnentryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updateUserColumn {
                get {
                    return this.columnupdateUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updateDateColumn {
                get {
                    return this.columnupdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tsColumn {
                get {
                    return this.columnts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isDBFieldColumn {
                get {
                    return this.columnisDBField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRow this[int index] {
                get {
                    return ((ddFieldRow)(this.Rows[index]));
                }
            }
            
            public event ddFieldRowChangeEventHandler ddFieldRowChanging;
            
            public event ddFieldRowChangeEventHandler ddFieldRowChanged;
            
            public event ddFieldRowChangeEventHandler ddFieldRowDeleting;
            
            public event ddFieldRowChangeEventHandler ddFieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddddFieldRow(ddFieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRow AddddFieldRow(
                        ddTableRow parentddTableRowByddTable_ddField, 
                        string TableName, 
                        int FieldId, 
                        string FieldName, 
                        string LeftEng, 
                        string LeftFre, 
                        string DataType, 
                        string FieldType, 
                        string Lookup, 
                        string TopEng, 
                        string TopFre, 
                        string DescEng, 
                        string DescFre, 
                        string ToolEng, 
                        string ToolFre, 
                        string HelpEng, 
                        string HelpFre, 
                        string entryUser, 
                        System.DateTime entryDate, 
                        string updateUser, 
                        System.DateTime updateDate, 
                        byte[] ts, 
                        bool isDBField) {
                ddFieldRow rowddFieldRow = ((ddFieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TableName,
                        FieldId,
                        FieldName,
                        LeftEng,
                        LeftFre,
                        DataType,
                        FieldType,
                        Lookup,
                        TopEng,
                        TopFre,
                        DescEng,
                        DescFre,
                        ToolEng,
                        ToolFre,
                        HelpEng,
                        HelpFre,
                        entryUser,
                        entryDate,
                        updateUser,
                        updateDate,
                        ts,
                        isDBField};
                if ((parentddTableRowByddTable_ddField != null)) {
                    columnValuesArray[0] = parentddTableRowByddTable_ddField[0];
                }
                rowddFieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowddFieldRow);
                return rowddFieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRow FindByFieldId(int FieldId) {
                return ((ddFieldRow)(this.Rows.Find(new object[] {
                            FieldId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ddFieldDataTable cln = ((ddFieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ddFieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTableId = base.Columns["TableId"];
                this.columnTableName = base.Columns["TableName"];
                this.columnFieldId = base.Columns["FieldId"];
                this.columnFieldName = base.Columns["FieldName"];
                this.columnLeftEng = base.Columns["LeftEng"];
                this.columnLeftFre = base.Columns["LeftFre"];
                this.columnDataType = base.Columns["DataType"];
                this.columnFieldType = base.Columns["FieldType"];
                this.columnLookup = base.Columns["Lookup"];
                this.columnTopEng = base.Columns["TopEng"];
                this.columnTopFre = base.Columns["TopFre"];
                this.columnDescEng = base.Columns["DescEng"];
                this.columnDescFre = base.Columns["DescFre"];
                this.columnToolEng = base.Columns["ToolEng"];
                this.columnToolFre = base.Columns["ToolFre"];
                this.columnHelpEng = base.Columns["HelpEng"];
                this.columnHelpFre = base.Columns["HelpFre"];
                this.columnentryUser = base.Columns["entryUser"];
                this.columnentryDate = base.Columns["entryDate"];
                this.columnupdateUser = base.Columns["updateUser"];
                this.columnupdateDate = base.Columns["updateDate"];
                this.columnts = base.Columns["ts"];
                this.columnisDBField = base.Columns["isDBField"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTableId = new global::System.Data.DataColumn("TableId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableId);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnFieldId = new global::System.Data.DataColumn("FieldId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldId);
                this.columnFieldName = new global::System.Data.DataColumn("FieldName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldName);
                this.columnLeftEng = new global::System.Data.DataColumn("LeftEng", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftEng);
                this.columnLeftFre = new global::System.Data.DataColumn("LeftFre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftFre);
                this.columnDataType = new global::System.Data.DataColumn("DataType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataType);
                this.columnFieldType = new global::System.Data.DataColumn("FieldType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldType);
                this.columnLookup = new global::System.Data.DataColumn("Lookup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLookup);
                this.columnTopEng = new global::System.Data.DataColumn("TopEng", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopEng);
                this.columnTopFre = new global::System.Data.DataColumn("TopFre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopFre);
                this.columnDescEng = new global::System.Data.DataColumn("DescEng", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescEng);
                this.columnDescFre = new global::System.Data.DataColumn("DescFre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescFre);
                this.columnToolEng = new global::System.Data.DataColumn("ToolEng", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToolEng);
                this.columnToolFre = new global::System.Data.DataColumn("ToolFre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToolFre);
                this.columnHelpEng = new global::System.Data.DataColumn("HelpEng", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHelpEng);
                this.columnHelpFre = new global::System.Data.DataColumn("HelpFre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHelpFre);
                this.columnentryUser = new global::System.Data.DataColumn("entryUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnentryUser);
                this.columnentryDate = new global::System.Data.DataColumn("entryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnentryDate);
                this.columnupdateUser = new global::System.Data.DataColumn("updateUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdateUser);
                this.columnupdateDate = new global::System.Data.DataColumn("updateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdateDate);
                this.columnts = new global::System.Data.DataColumn("ts", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnts);
                this.columnisDBField = new global::System.Data.DataColumn("isDBField", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisDBField);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ddInfoKey2", new global::System.Data.DataColumn[] {
                                this.columnFieldId}, true));
                this.columnTableId.AllowDBNull = false;
                this.columnTableName.AllowDBNull = false;
                this.columnFieldId.AllowDBNull = false;
                this.columnFieldId.Unique = true;
                this.columnFieldName.AllowDBNull = false;
                this.columnentryUser.AllowDBNull = false;
                this.columnentryDate.AllowDBNull = false;
                this.columnupdateUser.AllowDBNull = false;
                this.columnupdateDate.AllowDBNull = false;
                this.columnts.ReadOnly = true;
                this.columnisDBField.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRow NewddFieldRow() {
                return ((ddFieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ddFieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ddFieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ddFieldRowChanged != null)) {
                    this.ddFieldRowChanged(this, new ddFieldRowChangeEvent(((ddFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ddFieldRowChanging != null)) {
                    this.ddFieldRowChanging(this, new ddFieldRowChangeEvent(((ddFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ddFieldRowDeleted != null)) {
                    this.ddFieldRowDeleted(this, new ddFieldRowChangeEvent(((ddFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ddFieldRowDeleting != null)) {
                    this.ddFieldRowDeleting(this, new ddFieldRowChangeEvent(((ddFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveddFieldRow(ddFieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ddInfo ds = new ddInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ddFieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ddTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTableId;
            
            private global::System.Data.DataColumn columnTableName;
            
            private global::System.Data.DataColumn columnentryUser;
            
            private global::System.Data.DataColumn columnentryDate;
            
            private global::System.Data.DataColumn columnupdateUser;
            
            private global::System.Data.DataColumn columnupdateDate;
            
            private global::System.Data.DataColumn columnts;
            
            private global::System.Data.DataColumn columnDescriptionEng;
            
            private global::System.Data.DataColumn columnDescriptionFre;
            
            private global::System.Data.DataColumn columnisDBTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableDataTable() {
                this.TableName = "ddTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ddTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ddTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableIdColumn {
                get {
                    return this.columnTableId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn entryUserColumn {
                get {
                    return this.columnentryUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn entryDateColumn {
                get {
                    return this.columnentryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updateUserColumn {
                get {
                    return this.columnupdateUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updateDateColumn {
                get {
                    return this.columnupdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tsColumn {
                get {
                    return this.columnts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionEngColumn {
                get {
                    return this.columnDescriptionEng;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionFreColumn {
                get {
                    return this.columnDescriptionFre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isDBTableColumn {
                get {
                    return this.columnisDBTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRow this[int index] {
                get {
                    return ((ddTableRow)(this.Rows[index]));
                }
            }
            
            public event ddTableRowChangeEventHandler ddTableRowChanging;
            
            public event ddTableRowChangeEventHandler ddTableRowChanged;
            
            public event ddTableRowChangeEventHandler ddTableRowDeleting;
            
            public event ddTableRowChangeEventHandler ddTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddddTableRow(ddTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRow AddddTableRow(int TableId, string TableName, string entryUser, System.DateTime entryDate, string updateUser, System.DateTime updateDate, byte[] ts, string DescriptionEng, string DescriptionFre, bool isDBTable) {
                ddTableRow rowddTableRow = ((ddTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TableId,
                        TableName,
                        entryUser,
                        entryDate,
                        updateUser,
                        updateDate,
                        ts,
                        DescriptionEng,
                        DescriptionFre,
                        isDBTable};
                rowddTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowddTableRow);
                return rowddTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRow FindByTableId(int TableId) {
                return ((ddTableRow)(this.Rows.Find(new object[] {
                            TableId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ddTableDataTable cln = ((ddTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ddTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTableId = base.Columns["TableId"];
                this.columnTableName = base.Columns["TableName"];
                this.columnentryUser = base.Columns["entryUser"];
                this.columnentryDate = base.Columns["entryDate"];
                this.columnupdateUser = base.Columns["updateUser"];
                this.columnupdateDate = base.Columns["updateDate"];
                this.columnts = base.Columns["ts"];
                this.columnDescriptionEng = base.Columns["DescriptionEng"];
                this.columnDescriptionFre = base.Columns["DescriptionFre"];
                this.columnisDBTable = base.Columns["isDBTable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTableId = new global::System.Data.DataColumn("TableId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableId);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnentryUser = new global::System.Data.DataColumn("entryUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnentryUser);
                this.columnentryDate = new global::System.Data.DataColumn("entryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnentryDate);
                this.columnupdateUser = new global::System.Data.DataColumn("updateUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdateUser);
                this.columnupdateDate = new global::System.Data.DataColumn("updateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdateDate);
                this.columnts = new global::System.Data.DataColumn("ts", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnts);
                this.columnDescriptionEng = new global::System.Data.DataColumn("DescriptionEng", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescriptionEng);
                this.columnDescriptionFre = new global::System.Data.DataColumn("DescriptionFre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescriptionFre);
                this.columnisDBTable = new global::System.Data.DataColumn("isDBTable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisDBTable);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ddInfoKey1", new global::System.Data.DataColumn[] {
                                this.columnTableId}, true));
                this.columnTableId.AllowDBNull = false;
                this.columnTableId.Unique = true;
                this.columnTableName.AllowDBNull = false;
                this.columnentryUser.AllowDBNull = false;
                this.columnentryDate.AllowDBNull = false;
                this.columnupdateUser.AllowDBNull = false;
                this.columnupdateDate.AllowDBNull = false;
                this.columnts.ReadOnly = true;
                this.columnisDBTable.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRow NewddTableRow() {
                return ((ddTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ddTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ddTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ddTableRowChanged != null)) {
                    this.ddTableRowChanged(this, new ddTableRowChangeEvent(((ddTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ddTableRowChanging != null)) {
                    this.ddTableRowChanging(this, new ddTableRowChangeEvent(((ddTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ddTableRowDeleted != null)) {
                    this.ddTableRowDeleted(this, new ddTableRowChangeEvent(((ddTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ddTableRowDeleting != null)) {
                    this.ddTableRowDeleting(this, new ddTableRowChangeEvent(((ddTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveddTableRow(ddTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ddInfo ds = new ddInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ddTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ddFieldRow : global::System.Data.DataRow {
            
            private ddFieldDataTable tableddField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ddFieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableddField = ((ddFieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TableId {
                get {
                    return ((int)(this[this.tableddField.TableIdColumn]));
                }
                set {
                    this[this.tableddField.TableIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tableddField.TableNameColumn]));
                }
                set {
                    this[this.tableddField.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FieldId {
                get {
                    return ((int)(this[this.tableddField.FieldIdColumn]));
                }
                set {
                    this[this.tableddField.FieldIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FieldName {
                get {
                    return ((string)(this[this.tableddField.FieldNameColumn]));
                }
                set {
                    this[this.tableddField.FieldNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeftEng {
                get {
                    try {
                        return ((string)(this[this.tableddField.LeftEngColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeftEng\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.LeftEngColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeftFre {
                get {
                    try {
                        return ((string)(this[this.tableddField.LeftFreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeftFre\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.LeftFreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataType {
                get {
                    try {
                        return ((string)(this[this.tableddField.DataTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataType\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.DataTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FieldType {
                get {
                    try {
                        return ((string)(this[this.tableddField.FieldTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FieldType\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.FieldTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lookup {
                get {
                    try {
                        return ((string)(this[this.tableddField.LookupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lookup\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.LookupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopEng {
                get {
                    try {
                        return ((string)(this[this.tableddField.TopEngColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopEng\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.TopEngColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopFre {
                get {
                    try {
                        return ((string)(this[this.tableddField.TopFreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopFre\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.TopFreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescEng {
                get {
                    try {
                        return ((string)(this[this.tableddField.DescEngColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescEng\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.DescEngColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescFre {
                get {
                    try {
                        return ((string)(this[this.tableddField.DescFreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescFre\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.DescFreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToolEng {
                get {
                    try {
                        return ((string)(this[this.tableddField.ToolEngColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToolEng\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.ToolEngColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToolFre {
                get {
                    try {
                        return ((string)(this[this.tableddField.ToolFreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToolFre\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.ToolFreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HelpEng {
                get {
                    try {
                        return ((string)(this[this.tableddField.HelpEngColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HelpEng\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.HelpEngColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HelpFre {
                get {
                    try {
                        return ((string)(this[this.tableddField.HelpFreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HelpFre\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.HelpFreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string entryUser {
                get {
                    return ((string)(this[this.tableddField.entryUserColumn]));
                }
                set {
                    this[this.tableddField.entryUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime entryDate {
                get {
                    return ((global::System.DateTime)(this[this.tableddField.entryDateColumn]));
                }
                set {
                    this[this.tableddField.entryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string updateUser {
                get {
                    return ((string)(this[this.tableddField.updateUserColumn]));
                }
                set {
                    this[this.tableddField.updateUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime updateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableddField.updateDateColumn]));
                }
                set {
                    this[this.tableddField.updateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ts {
                get {
                    try {
                        return ((byte[])(this[this.tableddField.tsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ts\' in table \'ddField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddField.tsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isDBField {
                get {
                    return ((bool)(this[this.tableddField.isDBFieldColumn]));
                }
                set {
                    this[this.tableddField.isDBFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRow ddTableRow {
                get {
                    return ((ddTableRow)(this.GetParentRow(this.Table.ParentRelations["ddTable_ddField"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ddTable_ddField"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftEngNull() {
                return this.IsNull(this.tableddField.LeftEngColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftEngNull() {
                this[this.tableddField.LeftEngColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftFreNull() {
                return this.IsNull(this.tableddField.LeftFreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftFreNull() {
                this[this.tableddField.LeftFreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataTypeNull() {
                return this.IsNull(this.tableddField.DataTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataTypeNull() {
                this[this.tableddField.DataTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFieldTypeNull() {
                return this.IsNull(this.tableddField.FieldTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFieldTypeNull() {
                this[this.tableddField.FieldTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLookupNull() {
                return this.IsNull(this.tableddField.LookupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLookupNull() {
                this[this.tableddField.LookupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopEngNull() {
                return this.IsNull(this.tableddField.TopEngColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopEngNull() {
                this[this.tableddField.TopEngColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopFreNull() {
                return this.IsNull(this.tableddField.TopFreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopFreNull() {
                this[this.tableddField.TopFreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescEngNull() {
                return this.IsNull(this.tableddField.DescEngColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescEngNull() {
                this[this.tableddField.DescEngColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescFreNull() {
                return this.IsNull(this.tableddField.DescFreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescFreNull() {
                this[this.tableddField.DescFreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToolEngNull() {
                return this.IsNull(this.tableddField.ToolEngColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToolEngNull() {
                this[this.tableddField.ToolEngColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToolFreNull() {
                return this.IsNull(this.tableddField.ToolFreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToolFreNull() {
                this[this.tableddField.ToolFreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHelpEngNull() {
                return this.IsNull(this.tableddField.HelpEngColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHelpEngNull() {
                this[this.tableddField.HelpEngColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHelpFreNull() {
                return this.IsNull(this.tableddField.HelpFreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHelpFreNull() {
                this[this.tableddField.HelpFreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstsNull() {
                return this.IsNull(this.tableddField.tsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettsNull() {
                this[this.tableddField.tsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ddTableRow : global::System.Data.DataRow {
            
            private ddTableDataTable tableddTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ddTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableddTable = ((ddTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TableId {
                get {
                    return ((int)(this[this.tableddTable.TableIdColumn]));
                }
                set {
                    this[this.tableddTable.TableIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tableddTable.TableNameColumn]));
                }
                set {
                    this[this.tableddTable.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string entryUser {
                get {
                    return ((string)(this[this.tableddTable.entryUserColumn]));
                }
                set {
                    this[this.tableddTable.entryUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime entryDate {
                get {
                    return ((global::System.DateTime)(this[this.tableddTable.entryDateColumn]));
                }
                set {
                    this[this.tableddTable.entryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string updateUser {
                get {
                    return ((string)(this[this.tableddTable.updateUserColumn]));
                }
                set {
                    this[this.tableddTable.updateUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime updateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableddTable.updateDateColumn]));
                }
                set {
                    this[this.tableddTable.updateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ts {
                get {
                    try {
                        return ((byte[])(this[this.tableddTable.tsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ts\' in table \'ddTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddTable.tsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescriptionEng {
                get {
                    try {
                        return ((string)(this[this.tableddTable.DescriptionEngColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescriptionEng\' in table \'ddTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddTable.DescriptionEngColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescriptionFre {
                get {
                    try {
                        return ((string)(this[this.tableddTable.DescriptionFreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescriptionFre\' in table \'ddTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableddTable.DescriptionFreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isDBTable {
                get {
                    return ((bool)(this[this.tableddTable.isDBTableColumn]));
                }
                set {
                    this[this.tableddTable.isDBTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstsNull() {
                return this.IsNull(this.tableddTable.tsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettsNull() {
                this[this.tableddTable.tsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionEngNull() {
                return this.IsNull(this.tableddTable.DescriptionEngColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionEngNull() {
                this[this.tableddTable.DescriptionEngColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionFreNull() {
                return this.IsNull(this.tableddTable.DescriptionFreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionFreNull() {
                this[this.tableddTable.DescriptionFreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRow[] GetddFieldRows() {
                if ((this.Table.ChildRelations["ddTable_ddField"] == null)) {
                    return new ddFieldRow[0];
                }
                else {
                    return ((ddFieldRow[])(base.GetChildRows(this.Table.ChildRelations["ddTable_ddField"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ddFieldRowChangeEvent : global::System.EventArgs {
            
            private ddFieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRowChangeEvent(ddFieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddFieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ddTableRowChangeEvent : global::System.EventArgs {
            
            private ddTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRowChangeEvent(ddTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ddTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591