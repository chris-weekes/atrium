@using atriumBE;
@using lmDatasets;
@{
    atriumBE.FileManager fm = ViewBag.fm;
    ViewBag.Title = fm.CurrentFile.Name + " (" + fm.CurrentFile.FullFileNumber + ")";
    lmDatasets.ActivityConfig.ACSeriesRow acsr = fm.AtMng.acMng.DB.ACSeries.FindByACSeriesId(ViewBag.acSeriesId);
    ViewBag.Screen = acsr.Translate("DescEng", fm);
    atriumBE.ACEngine MyACE = new ACEngine(fm);
    MyACE.myAcSeries = acsr;
    MyACE.myActivityCode = acsr.ActivityCodeRow;
    if (ViewBag.ContextRow != null)
    {
        MyACE.AddToRelTables(ViewBag.ContextRow, "CONTEXT");
    }
    MyACE.DoRelFields();
    MyACE.DoStep(ACEngine.Step.RelatedFields0, true);
    MyACE.DoStep(ACEngine.Step.RelatedFields1, true);
    MyACE.DoStep(ACEngine.Step.RelatedFields2, true);
    MyACE.DoStep(ACEngine.Step.RelatedFields3, true);
    MyACE.DoStep(ACEngine.Step.RelatedFields4, true);
    MyACE.DoStep(ACEngine.Step.RelatedFields5, true);
    MyACE.DoStep(ACEngine.Step.RelatedFields6, true);

}


@helper DoBlock(bool hasBlock, int step, atriumBE.ACEngine MyACE, ActivityConfig.ACSeriesRow acsr)
{
    if (hasBlock)
    {
        bool grid = false;
        string gridAlias = "";
        List<ActivityConfig.ActivityFieldRow> gridCols = null;
        MyACE.LoadDataForStep(step, acsr.ACSeriesId);

        if (!MyACE.skipBlock)
        {

            bool hasGrid = MyACE.isBlockHasGrid(acsr, step);
            if (!hasGrid)
            {
                <div class="panel panel-info pnlA5 col-xs-12">
                    @if (!acsr.IsNull("Rel" + step.ToString() + MyACE.FM.AtMng.AppMan.Language.Substring(0, 1)))
                    {
                        <div class="panel-heading pnlHd">
                            <h5 class="panel-title">@acsr["Rel" + step.ToString() + MyACE.FM.AtMng.AppMan.Language.Substring(0, 1)].ToString()</h5>
                        </div>
                    }

                    <div class="panel-body">
                        @foreach (ActivityConfig.ActivityFieldRow arf in MyACE.FM.AtMng.acMng.DB.ActivityField.Select("ACSeriesId=" + acsr.ACSeriesId.ToString() + " and TaskType in ('F','P') and step=" + step.ToString(), "seq"))
                        {
                            @DoRow(grid, gridAlias, arf, MyACE, gridCols)
                        }
                    </div>
                </div>
            }
            else
            {
                if (!acsr.IsNull("Rel" + step.ToString() + MyACE.FM.AtMng.AppMan.Language.Substring(0, 1)))
                {

                    <div class="tblCaption">@acsr["Rel" + step.ToString() + MyACE.FM.AtMng.AppMan.Language.Substring(0, 1)].ToString()</div>

                }
                foreach (ActivityConfig.ActivityFieldRow arf in MyACE.FM.AtMng.acMng.DB.ActivityField.Select("ACSeriesId=" + acsr.ACSeriesId.ToString() + " and TaskType in ('F','P') and step=" + step.ToString(), "seq"))
                {
                    if (grid)
                    {
                        if (gridAlias != arf.ObjectAlias)
                        {
                            grid = false;
                            @DoGrid(MyACE, gridAlias, gridCols)
                        }
                        else
                        {
                            gridCols.Add(arf);
                        }
                    }
                    else
                    {
                        if (MyACE.relTables[arf.ObjectAlias].Count > 0)
                        {
                            object value = null;
                            if (!MyACE.relTables[arf.ObjectAlias][0].Row.IsNull(arf.DBFieldName))
                            {
                                value = MyACE.relTables[arf.ObjectAlias][0].Row[arf.DBFieldName];
                            }
                            <div class="form-group frmAt">

                                @if (arf.FieldType != "M")
                                {
                                    <div class="col-xs-3">
                                        <label class="control-label" for="@arf.FieldName">@arf.Translate("LabelEng", MyACE.FM)</label>
                                    </div>
                                }
                                else
                                {
                                    grid = true;
                                    gridAlias = arf.ObjectAlias;
                                    gridCols = new List<ActivityConfig.ActivityFieldRow>();
                                    //gridCols.Add(arf);
                                }
                                @if (!grid)
                                {
                                    <div class="col-xs-9">
                                        @DoField(arf, value, MyACE, false)
                                    </div>
                                }
                            </div>
                        }
                    }
                }
            }

            if (grid)
            {
                @DoGrid(MyACE, gridAlias, gridCols)
            }
        }
    }
}
@helper DoRow(bool grid, string gridAlias, ActivityConfig.ActivityFieldRow arf, ACEngine MyACE, List<ActivityConfig.ActivityFieldRow> gridCols)
{
    if (grid)
    {

        if (gridAlias != arf.ObjectAlias)
        {

            grid = false;
            @DoGrid(MyACE, gridAlias, gridCols)

        }
        else
        {
            gridCols.Add(arf);
        }


    }
    else
    {
        if (MyACE.relTables[arf.ObjectAlias].Count > 0)
        {
            object value = null;
            if (!MyACE.relTables[arf.ObjectAlias][0].Row.IsNull(arf.DBFieldName))
            {
                value = MyACE.relTables[arf.ObjectAlias][0].Row[arf.DBFieldName];
            }
            <div class="form-group">

                @if (arf.FieldType != "M")
                {
                    <div class="col-xs-3">
                        <label class=" control-label" for="@arf.FieldName">@arf.Translate("LabelEng", MyACE.FM)</label>
                    </div>
                }
                else
                {
                    grid = true;
                    gridAlias = arf.ObjectAlias;
                    gridCols = new List<ActivityConfig.ActivityFieldRow>();
                    //gridCols.Add(arf);
                }
                @if (!grid)
                {
                    <div class="col-xs-9">
                        @DoField(arf, value, MyACE, false)
                    </div>
                }
            </div>
        }
    }
}

@helper DoGrid(ACEngine MyACE, string gridAlias, List<ActivityConfig.ActivityFieldRow> gridCols)
{
    <table class="table table-condensed atTbl">
        <thead>
            <tr>
                @foreach (ActivityConfig.ActivityFieldRow col in gridCols)
                {
                    if (col.FieldType == "LK")
                    {
                        <th></th> }
                    else
                    {
                        <th>@col.Translate("LabelEng", MyACE.FM)</th>
                    }
                }
            </tr>
        </thead>
        <tbody>

            @foreach (System.Data.DataRowView dvr in MyACE.relTables[gridAlias])
            {
                string hilite = "";
                System.Data.DataRow dr = dvr.Row;
                bool isCurrent = false;
                if (MyACE.relTables.ContainsKey("CONTEXT"))
                {

                    System.Data.DataRow ctxr = MyACE.relTables["CONTEXT"][0].Row;
                    if (dr.Table.TableName == ctxr.Table.TableName)
                    {
                        if (dr[dr.Table.PrimaryKey[0]].ToString() == ctxr[dr.Table.PrimaryKey[0]].ToString())
                        {
                            hilite = "selectRow";
                            isCurrent = true;
                        }
                    }
                }
                <tr class="@hilite">
                    @foreach (ActivityConfig.ActivityFieldRow col in gridCols)
                    {
                        <td>@DoField(col, dr[col.FieldName], MyACE, isCurrent) </td>
                    }
                </tr>
            }

        </tbody>
    </table>

}
@helper DoField(ActivityConfig.ActivityFieldRow arf, object value, ACEngine MyACE, bool iscurrentrow)
{
    if (value == null || value == System.DBNull.Value)
    {<p class="form-control-static"></p> }
    else
    {
        string id = arf.ObjectAlias + arf.FieldName + value.ToString();
        switch (arf.FieldType)
        {
            case "LK":
                if (!arf.IsSpecialParameterNull() && arf.SpecialParameter == "POP")
                {
                    <button class="btn btn-sm btn-info btn-grid" type="button" role="dialog" id="@id">@arf.Translate("LabelEng", MyACE.FM)</button>
                    <script>
                        $("#@id").click(function () {
                            $.get("@Html.Raw(Url.Action(arf.ObjectAlias, new { fileid = MyACE.FM.CurrentFileId, linkid = value }))", function (data, status) {
                                //   alert(data);
                                $(".modal-body").html(data);
                                $("#ttt").modal("show");
                            });
                        });
                    </script>
                }
                else
                {
                    if (!iscurrentrow)
                    {
                        @Html.ActionLink(arf.Translate("LabelEng", MyACE.FM), arf.ObjectAlias, new { fileid = MyACE.FM.CurrentFileId, linkid = value })
                    }
                }
                break;

            case "C":
            case "MC":
            <p class="form-control-static">@Html.ResolveLookup(value, arf.LookUp, MyACE.FM, null)</p>
                break;
            case "XXX":
            <select disabled>
                @foreach (System.Data.DataRow dr in MyACE.FM.Codes(arf.LookUp).Rows)
                {
                    <option @if (dr[0] == value) { <text> selected </text>               } value="@dr[0].ToString()">@dr[1].ToString()</option>
                }
            </select>
                break;
            case "A":
                string v = "";
                if (value != null)
                {
                    DateTime d = (DateTime)value;
                    v = d.ToString("yyyy/MM/dd");
                }
                <p class="form-control-static">@v</p>
                break;
            case "B":
                Decimal cur = (Decimal)value;
                <p class="form-control-static">@cur.ToString("C")</p>
                break;
            case "P":
                Decimal per = (Decimal)value / 100;
                <p class="form-control-static">@per.ToString("P")</p>
                break;
            case "X":
                bool sel = (bool)value;
                if (sel)
                {
                    <input disabled type="checkbox" class="form-control-static" name="@arf.ObjectAlias" checked />
                }
                else
                { <input disabled type="checkbox" class="form-control-static" name="@arf.ObjectAlias" />}

                break;
            default:
            <p class="form-control-static">@value.ToString()</p>
                break;
        }
    }
}


<div class="toc">@Html.Partial("TOC")</div>
<h3 class="scrnHdr">@acsr.Translate("DescEng", fm)</h3>
<div class="container-fluid bcc">
    <form class="form-horizontal">

        @DoBlock(MyACE.HasRel0, 0, MyACE, acsr)
        @DoBlock(MyACE.HasRel1, 1, MyACE, acsr)
        @DoBlock(MyACE.HasRel2, 2, MyACE, acsr)
        @DoBlock(MyACE.HasRel3, 3, MyACE, acsr)
        @DoBlock(MyACE.HasRel4, 4, MyACE, acsr)
        @DoBlock(MyACE.HasRel5, 5, MyACE, acsr)
        @DoBlock(MyACE.HasRel6, 6, MyACE, acsr)
        @DoBlock(MyACE.HasRel7, 7, MyACE, acsr)
        @DoBlock(MyACE.HasRel8, 8, MyACE, acsr)
        @DoBlock(MyACE.HasRel9, 9, MyACE, acsr)

    </form>
</div>
<div class="modal fade" id="ttt">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default btn-info btn-grid" data-dismiss="modal">@Html.TranlateLabel(Helper.Atmng(), "Close", "Fermer")</button>
            </div>

        </div>
    </div>
</div>
